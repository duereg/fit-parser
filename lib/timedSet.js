// Generated by CoffeeScript 1.8.0
(function() {
  var Interval, IntervalSet, Set, actions, timeFormatter;

  Interval = require('./interval');

  IntervalSet = require('./intervalSet');

  actions = require('./actions');

  timeFormatter = require('./timeFormatter');

  Set = (function() {
    function Set(options) {
      if (options != null) {
        this.name = options.name, this.intervals = options.intervals;
      }
      if (this.intervals == null) {
        this.intervals = [];
      }
      if (this.name == null) {
        this.name = '';
      }
      this.intervals = this.intervals.map(function(interval) {
        if (interval.intervals) {
          return new IntervalSet(interval.intervals);
        } else {
          return new Interval(interval);
        }
      });
    }

    Set.prototype.toString = function() {
      var output;
      output = '';
      if (this.name.length) {
        output += this.name + '\n';
      }
      output += this.intervals.map(function(interval) {
        return interval.toString();
      }).join('\n');
      return output;
    };

    Set.prototype.toJSON = function() {
      return {
        name: this.name,
        intervals: this.intervals.map(function(interval) {
          return interval.toJSON();
        })
      };
    };

    Set.prototype.addInterval = function(intervalToAdd) {
      if (intervalToAdd === null) {
        throw new Error('Invalid interval given');
      }
      if (intervalToAdd == null) {
        intervalToAdd = new Interval();
      }
      this.intervals.push(intervalToAdd);
      return intervalToAdd;
    };

    Set.prototype.current = function() {
      var currentInterval, intervalLength;
      currentInterval = null;
      intervalLength = this.intervals.length;
      if (intervalLength > 0) {
        currentInterval = this.intervals[intervalLength - 1];
      } else {
        currentInterval = this.addInterval();
      }
      return currentInterval;
    };

    Set.prototype.changeToMulti = function() {
      var numIntervals;
      numIntervals = this.current().distance;
      this.intervals.pop();
      return this.addInterval(new IntervalSet(numIntervals));
    };

    Set.prototype.setRest = function(rest) {
      return this.current().rest = rest;
    };

    Set.prototype.setDistance = function(distance) {
      return this.current().distance = distance;
    };

    Set.prototype.setTime = function(time) {
      return this.current().time = timeFormatter.toDuration(time);
    };

    Set.prototype.setType = function(type) {
      return this.current().type = type;
    };

    Set.prototype.totalDistance = function() {
      return actions.sum(this.intervals, 'distance');
    };

    Set.prototype.totalTime = function() {
      return actions.sum(this.intervals, 'time');
    };

    Set.prototype.totalIntervals = function() {
      var interval, total, _i, _len, _ref;
      total = 0;
      _ref = this.intervals;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        interval = _ref[_i];
        if (interval != null ? interval.intervals : void 0) {
          total += interval.intervals.length;
        } else {
          total += 1;
        }
      }
      return total;
    };

    return Set;

  })();

  module.exports = Set;

}).call(this);
